//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 16/05/2025 11:41:17
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace BddprojetContext
{

    [DatabaseAttribute(Name = "bddprojet")]
    [ProviderAttribute(typeof(Devart.Data.MySql.Linq.Provider.MySqlDataProvider))]
    public partial class BddprojetDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(BddprojetDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertClient(Client instance);
        partial void UpdateClient(Client instance);
        partial void DeleteClient(Client instance);
        partial void InsertCommande(Commande instance);
        partial void UpdateCommande(Commande instance);
        partial void DeleteCommande(Commande instance);
        partial void InsertCote(Cote instance);
        partial void UpdateCote(Cote instance);
        partial void DeleteCote(Cote instance);
        partial void InsertEmployé(Employé instance);
        partial void UpdateEmployé(Employé instance);
        partial void DeleteEmployé(Employé instance);
        partial void InsertFermeture(Fermeture instance);
        partial void UpdateFermeture(Fermeture instance);
        partial void DeleteFermeture(Fermeture instance);
        partial void InsertMatériaux(Matériaux instance);
        partial void UpdateMatériaux(Matériaux instance);
        partial void DeleteMatériaux(Matériaux instance);
        partial void InsertNumeroplan(Numeroplan instance);
        partial void UpdateNumeroplan(Numeroplan instance);
        partial void DeleteNumeroplan(Numeroplan instance);
        partial void InsertPlan(Plan instance);
        partial void UpdatePlan(Plan instance);
        partial void DeletePlan(Plan instance);

        #endregion

        public BddprojetDataContext() :
        base(GetConnectionString("BddprojetDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public BddprojetDataContext(MappingSource mappingSource) :
        base(GetConnectionString("BddprojetDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public BddprojetDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public BddprojetDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public BddprojetDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public BddprojetDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Client> Clients
        {
            get
            {
                return this.GetTable<Client>();
            }
        }

        public Devart.Data.Linq.Table<Commande> Commandes
        {
            get
            {
                return this.GetTable<Commande>();
            }
        }

        public Devart.Data.Linq.Table<Cote> Cotes
        {
            get
            {
                return this.GetTable<Cote>();
            }
        }

        public Devart.Data.Linq.Table<Employé> Employés
        {
            get
            {
                return this.GetTable<Employé>();
            }
        }

        public Devart.Data.Linq.Table<Fermeture> Fermetures
        {
            get
            {
                return this.GetTable<Fermeture>();
            }
        }

        public Devart.Data.Linq.Table<Matériaux> Matériauxes
        {
            get
            {
                return this.GetTable<Matériaux>();
            }
        }

        public Devart.Data.Linq.Table<Numeroplan> Numeroplans
        {
            get
            {
                return this.GetTable<Numeroplan>();
            }
        }

        public Devart.Data.Linq.Table<Plan> Plans
        {
            get
            {
                return this.GetTable<Plan>();
            }
        }
    }
}

namespace BddprojetContext
{

    /// <summary>
    /// There are no comments for BddprojetContext.Client in the schema.
    /// </summary>
    [Table(Name = @"bddprojet.client")]
    public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private string _NomE;

        private string _PrenomC;

        private string _NomC;

        private string _Contact;

        private int _NumeroRue;

        private string _NomRue;

        private int _Cp;
        #pragma warning restore 0649

        private EntitySet<Commande> _Commandes;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnNomEChanging(string value);
        partial void OnNomEChanged();
        partial void OnPrenomCChanging(string value);
        partial void OnPrenomCChanged();
        partial void OnNomCChanging(string value);
        partial void OnNomCChanged();
        partial void OnContactChanging(string value);
        partial void OnContactChanged();
        partial void OnNumeroRueChanging(int value);
        partial void OnNumeroRueChanged();
        partial void OnNomRueChanging(string value);
        partial void OnNomRueChanged();
        partial void OnCpChanging(int value);
        partial void OnCpChanged();
        #endregion

        public Client()
        {
            this._Commandes = new EntitySet<Commande>(new Action<Commande>(this.attach_Commandes), new Action<Commande>(this.detach_Commandes));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NomE in the schema.
        /// </summary>
        [Column(Name = @"nom_E", Storage = "_NomE", CanBeNull = false, DbType = "VARCHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string NomE
        {
            get
            {
                return this._NomE;
            }
            set
            {
                if (this._NomE != value)
                {
                    this.OnNomEChanging(value);
                    this.SendPropertyChanging("NomE");
                    this._NomE = value;
                    this.SendPropertyChanged("NomE");
                    this.OnNomEChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PrenomC in the schema.
        /// </summary>
        [Column(Name = @"prenom_C", Storage = "_PrenomC", CanBeNull = false, DbType = "VARCHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PrenomC
        {
            get
            {
                return this._PrenomC;
            }
            set
            {
                if (this._PrenomC != value)
                {
                    this.OnPrenomCChanging(value);
                    this.SendPropertyChanging("PrenomC");
                    this._PrenomC = value;
                    this.SendPropertyChanged("PrenomC");
                    this.OnPrenomCChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NomC in the schema.
        /// </summary>
        [Column(Name = @"nom_C", Storage = "_NomC", CanBeNull = false, DbType = "VARCHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string NomC
        {
            get
            {
                return this._NomC;
            }
            set
            {
                if (this._NomC != value)
                {
                    this.OnNomCChanging(value);
                    this.SendPropertyChanging("NomC");
                    this._NomC = value;
                    this.SendPropertyChanged("NomC");
                    this.OnNomCChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contact in the schema.
        /// </summary>
        [Column(Name = @"contact", Storage = "_Contact", CanBeNull = false, DbType = "VARCHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Contact
        {
            get
            {
                return this._Contact;
            }
            set
            {
                if (this._Contact != value)
                {
                    this.OnContactChanging(value);
                    this.SendPropertyChanging("Contact");
                    this._Contact = value;
                    this.SendPropertyChanged("Contact");
                    this.OnContactChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NumeroRue in the schema.
        /// </summary>
        [Column(Name = @"numero_rue", Storage = "_NumeroRue", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int NumeroRue
        {
            get
            {
                return this._NumeroRue;
            }
            set
            {
                if (this._NumeroRue != value)
                {
                    this.OnNumeroRueChanging(value);
                    this.SendPropertyChanging("NumeroRue");
                    this._NumeroRue = value;
                    this.SendPropertyChanged("NumeroRue");
                    this.OnNumeroRueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NomRue in the schema.
        /// </summary>
        [Column(Name = @"nom_rue", Storage = "_NomRue", CanBeNull = false, DbType = "VARCHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string NomRue
        {
            get
            {
                return this._NomRue;
            }
            set
            {
                if (this._NomRue != value)
                {
                    this.OnNomRueChanging(value);
                    this.SendPropertyChanging("NomRue");
                    this._NomRue = value;
                    this.SendPropertyChanged("NomRue");
                    this.OnNomRueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cp in the schema.
        /// </summary>
        [Column(Name = @"cp", Storage = "_Cp", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Cp
        {
            get
            {
                return this._Cp;
            }
            set
            {
                if (this._Cp != value)
                {
                    this.OnCpChanging(value);
                    this.SendPropertyChanging("Cp");
                    this._Cp = value;
                    this.SendPropertyChanged("Cp");
                    this.OnCpChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Commandes in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Client_Commande", Storage="_Commandes", ThisKey="Id", OtherKey="IdClient", DeleteRule="CASCADE")]
        public EntitySet<Commande> Commandes
        {
            get
            {
                return this._Commandes;
            }
            set
            {
                this._Commandes.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Commandes(Commande entity)
        {
            this.SendPropertyChanging("Commandes");
            entity.Client = this;
        }
    
        private void detach_Commandes(Commande entity)
        {
            this.SendPropertyChanging("Commandes");
            entity.Client = null;
        }
    }

    /// <summary>
    /// There are no comments for BddprojetContext.Commande in the schema.
    /// </summary>
    [Table(Name = @"bddprojet.commandes")]
    public partial class Commande : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private int _IdClient;

        private int _NbPlan;

        private int _EtatCmd;
        #pragma warning restore 0649

        private EntityRef<Client> _Client;

        private EntitySet<Plan> _Plans;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnIdClientChanging(int value);
        partial void OnIdClientChanged();
        partial void OnNbPlanChanging(int value);
        partial void OnNbPlanChanged();
        partial void OnEtatCmdChanging(int value);
        partial void OnEtatCmdChanged();
        #endregion

        public Commande()
        {
            this._Client  = default(EntityRef<Client>);
            this._Plans = new EntitySet<Plan>(new Action<Plan>(this.attach_Plans), new Action<Plan>(this.detach_Plans));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdClient in the schema.
        /// </summary>
        [Column(Name = @"id_client", Storage = "_IdClient", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int IdClient
        {
            get
            {
                return this._IdClient;
            }
            set
            {
                if (this._IdClient != value)
                {
                    if (this._Client.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdClientChanging(value);
                    this.SendPropertyChanging("IdClient");
                    this._IdClient = value;
                    this.SendPropertyChanged("IdClient");
                    this.OnIdClientChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NbPlan in the schema.
        /// </summary>
        [Column(Name = @"nb_plan", Storage = "_NbPlan", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int NbPlan
        {
            get
            {
                return this._NbPlan;
            }
            set
            {
                if (this._NbPlan != value)
                {
                    this.OnNbPlanChanging(value);
                    this.SendPropertyChanging("NbPlan");
                    this._NbPlan = value;
                    this.SendPropertyChanged("NbPlan");
                    this.OnNbPlanChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EtatCmd in the schema.
        /// </summary>
        [Column(Name = @"etat_cmd", Storage = "_EtatCmd", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int EtatCmd
        {
            get
            {
                return this._EtatCmd;
            }
            set
            {
                if (this._EtatCmd != value)
                {
                    this.OnEtatCmdChanging(value);
                    this.SendPropertyChanging("EtatCmd");
                    this._EtatCmd = value;
                    this.SendPropertyChanged("EtatCmd");
                    this.OnEtatCmdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Client in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Client_Commande", Storage="_Client", ThisKey="IdClient", OtherKey="Id", IsForeignKey=true)]
        public Client Client
        {
            get
            {
                return this._Client.Entity;
            }
            set
            {
                Client previousValue = this._Client.Entity;
                if ((previousValue != value) || (this._Client.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Client");
                    if (previousValue != null)
                    {
                        this._Client.Entity = null;
                        previousValue.Commandes.Remove(this);
                    }
                    this._Client.Entity = value;
                    if (value != null)
                    {
                        this._IdClient = value.Id;
                        value.Commandes.Add(this);
                    }
                    else
                    {
                        this._IdClient = default(int);
                    }
                    this.SendPropertyChanged("Client");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Plans in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Commande_Plan", Storage="_Plans", ThisKey="Id", OtherKey="IdCommande", DeleteRule="RESTRICT")]
        public EntitySet<Plan> Plans
        {
            get
            {
                return this._Plans;
            }
            set
            {
                this._Plans.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Plans(Plan entity)
        {
            this.SendPropertyChanging("Plans");
            entity.Commande = this;
        }
    
        private void detach_Plans(Plan entity)
        {
            this.SendPropertyChanging("Plans");
            entity.Commande = null;
        }
    }

    /// <summary>
    /// There are no comments for BddprojetContext.Cote in the schema.
    /// </summary>
    [Table(Name = @"bddprojet.cote")]
    public partial class Cote : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private float? _Longueur;

        private double? _Diametre;

        private double? _Deport;

        private double? _Hauteur;

        private double? _Profondeur;

        private double? _Epaisseur;

        private double? _Axe1PeDiametre;

        private double? _Axe1PeLongueur;

        private double? _Axe1PeLargeur;

        private double? _Axe2PeDiametre;

        private double? _Axe2PeLongueur;

        private double? _Axe2PeLargeur;

        private double? _Axe1VolantDiametre;

        private double? _Axe1VolantLongueur;

        private double? _Axe1VolantLargeur;

        private double? _Axe2VolantDiametre;

        private double? _Axe2VolantLongueur;

        private double? _Axe2VolantLargeur;

        private double? _Autre;

        private int _IdPlan;
        #pragma warning restore 0649

        private EntityRef<Plan> _Plan;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnLongueurChanging(float? value);
        partial void OnLongueurChanged();
        partial void OnDiametreChanging(double? value);
        partial void OnDiametreChanged();
        partial void OnDeportChanging(double? value);
        partial void OnDeportChanged();
        partial void OnHauteurChanging(double? value);
        partial void OnHauteurChanged();
        partial void OnProfondeurChanging(double? value);
        partial void OnProfondeurChanged();
        partial void OnEpaisseurChanging(double? value);
        partial void OnEpaisseurChanged();
        partial void OnAxe1PeDiametreChanging(double? value);
        partial void OnAxe1PeDiametreChanged();
        partial void OnAxe1PeLongueurChanging(double? value);
        partial void OnAxe1PeLongueurChanged();
        partial void OnAxe1PeLargeurChanging(double? value);
        partial void OnAxe1PeLargeurChanged();
        partial void OnAxe2PeDiametreChanging(double? value);
        partial void OnAxe2PeDiametreChanged();
        partial void OnAxe2PeLongueurChanging(double? value);
        partial void OnAxe2PeLongueurChanged();
        partial void OnAxe2PeLargeurChanging(double? value);
        partial void OnAxe2PeLargeurChanged();
        partial void OnAxe1VolantDiametreChanging(double? value);
        partial void OnAxe1VolantDiametreChanged();
        partial void OnAxe1VolantLongueurChanging(double? value);
        partial void OnAxe1VolantLongueurChanged();
        partial void OnAxe1VolantLargeurChanging(double? value);
        partial void OnAxe1VolantLargeurChanged();
        partial void OnAxe2VolantDiametreChanging(double? value);
        partial void OnAxe2VolantDiametreChanged();
        partial void OnAxe2VolantLongueurChanging(double? value);
        partial void OnAxe2VolantLongueurChanged();
        partial void OnAxe2VolantLargeurChanging(double? value);
        partial void OnAxe2VolantLargeurChanged();
        partial void OnAutreChanging(double? value);
        partial void OnAutreChanged();
        partial void OnIdPlanChanging(int value);
        partial void OnIdPlanChanged();
        #endregion

        public Cote()
        {
            this._Plan  = default(EntityRef<Plan>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Longueur in the schema.
        /// </summary>
        [Column(Name = @"longueur", Storage = "_Longueur", DbType = "FLOAT NULL", UpdateCheck = UpdateCheck.Never)]
        public float? Longueur
        {
            get
            {
                return this._Longueur;
            }
            set
            {
                if (this._Longueur != value)
                {
                    this.OnLongueurChanging(value);
                    this.SendPropertyChanging("Longueur");
                    this._Longueur = value;
                    this.SendPropertyChanged("Longueur");
                    this.OnLongueurChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Diametre in the schema.
        /// </summary>
        [Column(Storage = "_Diametre", DbType = "DOUBLE NULL", UpdateCheck = UpdateCheck.Never)]
        public double? Diametre
        {
            get
            {
                return this._Diametre;
            }
            set
            {
                if (this._Diametre != value)
                {
                    this.OnDiametreChanging(value);
                    this.SendPropertyChanging("Diametre");
                    this._Diametre = value;
                    this.SendPropertyChanged("Diametre");
                    this.OnDiametreChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Deport in the schema.
        /// </summary>
        [Column(Name = @"deport", Storage = "_Deport", DbType = "DOUBLE NULL", UpdateCheck = UpdateCheck.Never)]
        public double? Deport
        {
            get
            {
                return this._Deport;
            }
            set
            {
                if (this._Deport != value)
                {
                    this.OnDeportChanging(value);
                    this.SendPropertyChanging("Deport");
                    this._Deport = value;
                    this.SendPropertyChanged("Deport");
                    this.OnDeportChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Hauteur in the schema.
        /// </summary>
        [Column(Name = @"hauteur", Storage = "_Hauteur", DbType = "DOUBLE NULL", UpdateCheck = UpdateCheck.Never)]
        public double? Hauteur
        {
            get
            {
                return this._Hauteur;
            }
            set
            {
                if (this._Hauteur != value)
                {
                    this.OnHauteurChanging(value);
                    this.SendPropertyChanging("Hauteur");
                    this._Hauteur = value;
                    this.SendPropertyChanged("Hauteur");
                    this.OnHauteurChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Profondeur in the schema.
        /// </summary>
        [Column(Name = @"profondeur", Storage = "_Profondeur", DbType = "DOUBLE NULL", UpdateCheck = UpdateCheck.Never)]
        public double? Profondeur
        {
            get
            {
                return this._Profondeur;
            }
            set
            {
                if (this._Profondeur != value)
                {
                    this.OnProfondeurChanging(value);
                    this.SendPropertyChanging("Profondeur");
                    this._Profondeur = value;
                    this.SendPropertyChanged("Profondeur");
                    this.OnProfondeurChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Epaisseur in the schema.
        /// </summary>
        [Column(Name = @"epaisseur", Storage = "_Epaisseur", DbType = "DOUBLE NULL", UpdateCheck = UpdateCheck.Never)]
        public double? Epaisseur
        {
            get
            {
                return this._Epaisseur;
            }
            set
            {
                if (this._Epaisseur != value)
                {
                    this.OnEpaisseurChanging(value);
                    this.SendPropertyChanging("Epaisseur");
                    this._Epaisseur = value;
                    this.SendPropertyChanged("Epaisseur");
                    this.OnEpaisseurChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Axe1PeDiametre in the schema.
        /// </summary>
        [Column(Name = @"axe1_pe_diametre", Storage = "_Axe1PeDiametre", DbType = "DOUBLE NULL", UpdateCheck = UpdateCheck.Never)]
        public double? Axe1PeDiametre
        {
            get
            {
                return this._Axe1PeDiametre;
            }
            set
            {
                if (this._Axe1PeDiametre != value)
                {
                    this.OnAxe1PeDiametreChanging(value);
                    this.SendPropertyChanging("Axe1PeDiametre");
                    this._Axe1PeDiametre = value;
                    this.SendPropertyChanged("Axe1PeDiametre");
                    this.OnAxe1PeDiametreChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Axe1PeLongueur in the schema.
        /// </summary>
        [Column(Name = @"axe1_pe_longueur", Storage = "_Axe1PeLongueur", DbType = "DOUBLE NULL", UpdateCheck = UpdateCheck.Never)]
        public double? Axe1PeLongueur
        {
            get
            {
                return this._Axe1PeLongueur;
            }
            set
            {
                if (this._Axe1PeLongueur != value)
                {
                    this.OnAxe1PeLongueurChanging(value);
                    this.SendPropertyChanging("Axe1PeLongueur");
                    this._Axe1PeLongueur = value;
                    this.SendPropertyChanged("Axe1PeLongueur");
                    this.OnAxe1PeLongueurChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Axe1PeLargeur in the schema.
        /// </summary>
        [Column(Name = @"axe1_pe_largeur", Storage = "_Axe1PeLargeur", DbType = "DOUBLE NULL", UpdateCheck = UpdateCheck.Never)]
        public double? Axe1PeLargeur
        {
            get
            {
                return this._Axe1PeLargeur;
            }
            set
            {
                if (this._Axe1PeLargeur != value)
                {
                    this.OnAxe1PeLargeurChanging(value);
                    this.SendPropertyChanging("Axe1PeLargeur");
                    this._Axe1PeLargeur = value;
                    this.SendPropertyChanged("Axe1PeLargeur");
                    this.OnAxe1PeLargeurChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Axe2PeDiametre in the schema.
        /// </summary>
        [Column(Name = @"axe2_pe_diametre", Storage = "_Axe2PeDiametre", DbType = "DOUBLE NULL", UpdateCheck = UpdateCheck.Never)]
        public double? Axe2PeDiametre
        {
            get
            {
                return this._Axe2PeDiametre;
            }
            set
            {
                if (this._Axe2PeDiametre != value)
                {
                    this.OnAxe2PeDiametreChanging(value);
                    this.SendPropertyChanging("Axe2PeDiametre");
                    this._Axe2PeDiametre = value;
                    this.SendPropertyChanged("Axe2PeDiametre");
                    this.OnAxe2PeDiametreChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Axe2PeLongueur in the schema.
        /// </summary>
        [Column(Name = @"axe2_pe_longueur", Storage = "_Axe2PeLongueur", DbType = "DOUBLE NULL", UpdateCheck = UpdateCheck.Never)]
        public double? Axe2PeLongueur
        {
            get
            {
                return this._Axe2PeLongueur;
            }
            set
            {
                if (this._Axe2PeLongueur != value)
                {
                    this.OnAxe2PeLongueurChanging(value);
                    this.SendPropertyChanging("Axe2PeLongueur");
                    this._Axe2PeLongueur = value;
                    this.SendPropertyChanged("Axe2PeLongueur");
                    this.OnAxe2PeLongueurChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Axe2PeLargeur in the schema.
        /// </summary>
        [Column(Name = @"axe2_pe_largeur", Storage = "_Axe2PeLargeur", DbType = "DOUBLE NULL", UpdateCheck = UpdateCheck.Never)]
        public double? Axe2PeLargeur
        {
            get
            {
                return this._Axe2PeLargeur;
            }
            set
            {
                if (this._Axe2PeLargeur != value)
                {
                    this.OnAxe2PeLargeurChanging(value);
                    this.SendPropertyChanging("Axe2PeLargeur");
                    this._Axe2PeLargeur = value;
                    this.SendPropertyChanged("Axe2PeLargeur");
                    this.OnAxe2PeLargeurChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Axe1VolantDiametre in the schema.
        /// </summary>
        [Column(Name = @"axe1_volant_diametre", Storage = "_Axe1VolantDiametre", DbType = "DOUBLE NULL", UpdateCheck = UpdateCheck.Never)]
        public double? Axe1VolantDiametre
        {
            get
            {
                return this._Axe1VolantDiametre;
            }
            set
            {
                if (this._Axe1VolantDiametre != value)
                {
                    this.OnAxe1VolantDiametreChanging(value);
                    this.SendPropertyChanging("Axe1VolantDiametre");
                    this._Axe1VolantDiametre = value;
                    this.SendPropertyChanged("Axe1VolantDiametre");
                    this.OnAxe1VolantDiametreChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Axe1VolantLongueur in the schema.
        /// </summary>
        [Column(Name = @"axe1_volant_longueur", Storage = "_Axe1VolantLongueur", DbType = "DOUBLE NULL", UpdateCheck = UpdateCheck.Never)]
        public double? Axe1VolantLongueur
        {
            get
            {
                return this._Axe1VolantLongueur;
            }
            set
            {
                if (this._Axe1VolantLongueur != value)
                {
                    this.OnAxe1VolantLongueurChanging(value);
                    this.SendPropertyChanging("Axe1VolantLongueur");
                    this._Axe1VolantLongueur = value;
                    this.SendPropertyChanged("Axe1VolantLongueur");
                    this.OnAxe1VolantLongueurChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Axe1VolantLargeur in the schema.
        /// </summary>
        [Column(Name = @"axe1_volant_largeur", Storage = "_Axe1VolantLargeur", DbType = "DOUBLE NULL", UpdateCheck = UpdateCheck.Never)]
        public double? Axe1VolantLargeur
        {
            get
            {
                return this._Axe1VolantLargeur;
            }
            set
            {
                if (this._Axe1VolantLargeur != value)
                {
                    this.OnAxe1VolantLargeurChanging(value);
                    this.SendPropertyChanging("Axe1VolantLargeur");
                    this._Axe1VolantLargeur = value;
                    this.SendPropertyChanged("Axe1VolantLargeur");
                    this.OnAxe1VolantLargeurChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Axe2VolantDiametre in the schema.
        /// </summary>
        [Column(Name = @"axe2_volant_diametre", Storage = "_Axe2VolantDiametre", DbType = "DOUBLE NULL", UpdateCheck = UpdateCheck.Never)]
        public double? Axe2VolantDiametre
        {
            get
            {
                return this._Axe2VolantDiametre;
            }
            set
            {
                if (this._Axe2VolantDiametre != value)
                {
                    this.OnAxe2VolantDiametreChanging(value);
                    this.SendPropertyChanging("Axe2VolantDiametre");
                    this._Axe2VolantDiametre = value;
                    this.SendPropertyChanged("Axe2VolantDiametre");
                    this.OnAxe2VolantDiametreChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Axe2VolantLongueur in the schema.
        /// </summary>
        [Column(Name = @"axe2_volant_longueur", Storage = "_Axe2VolantLongueur", DbType = "DOUBLE NULL", UpdateCheck = UpdateCheck.Never)]
        public double? Axe2VolantLongueur
        {
            get
            {
                return this._Axe2VolantLongueur;
            }
            set
            {
                if (this._Axe2VolantLongueur != value)
                {
                    this.OnAxe2VolantLongueurChanging(value);
                    this.SendPropertyChanging("Axe2VolantLongueur");
                    this._Axe2VolantLongueur = value;
                    this.SendPropertyChanged("Axe2VolantLongueur");
                    this.OnAxe2VolantLongueurChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Axe2VolantLargeur in the schema.
        /// </summary>
        [Column(Name = @"axe2_volant_largeur", Storage = "_Axe2VolantLargeur", DbType = "DOUBLE NULL", UpdateCheck = UpdateCheck.Never)]
        public double? Axe2VolantLargeur
        {
            get
            {
                return this._Axe2VolantLargeur;
            }
            set
            {
                if (this._Axe2VolantLargeur != value)
                {
                    this.OnAxe2VolantLargeurChanging(value);
                    this.SendPropertyChanging("Axe2VolantLargeur");
                    this._Axe2VolantLargeur = value;
                    this.SendPropertyChanged("Axe2VolantLargeur");
                    this.OnAxe2VolantLargeurChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Autre in the schema.
        /// </summary>
        [Column(Name = @"autre", Storage = "_Autre", DbType = "DOUBLE NULL", UpdateCheck = UpdateCheck.Never)]
        public double? Autre
        {
            get
            {
                return this._Autre;
            }
            set
            {
                if (this._Autre != value)
                {
                    this.OnAutreChanging(value);
                    this.SendPropertyChanging("Autre");
                    this._Autre = value;
                    this.SendPropertyChanged("Autre");
                    this.OnAutreChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdPlan in the schema.
        /// </summary>
        [Column(Name = @"id_plan", Storage = "_IdPlan", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int IdPlan
        {
            get
            {
                return this._IdPlan;
            }
            set
            {
                if (this._IdPlan != value)
                {
                    if (this._Plan.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdPlanChanging(value);
                    this.SendPropertyChanging("IdPlan");
                    this._IdPlan = value;
                    this.SendPropertyChanged("IdPlan");
                    this.OnIdPlanChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Plan in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Plan_Cote", Storage="_Plan", ThisKey="IdPlan", OtherKey="Id", IsForeignKey=true)]
        public Plan Plan
        {
            get
            {
                return this._Plan.Entity;
            }
            set
            {
                Plan previousValue = this._Plan.Entity;
                if ((previousValue != value) || (this._Plan.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Plan");
                    if (previousValue != null)
                    {
                        this._Plan.Entity = null;
                        previousValue.Cotes.Remove(this);
                    }
                    this._Plan.Entity = value;
                    if (value != null)
                    {
                        this._IdPlan = value.Id;
                        value.Cotes.Add(this);
                    }
                    else
                    {
                        this._IdPlan = default(int);
                    }
                    this.SendPropertyChanged("Plan");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for BddprojetContext.Employé in the schema.
    /// </summary>
    [Table(Name = @"bddprojet.employé")]
    public partial class Employé : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private string _Nom;

        private string _Prenom;

        private string _Login;

        private string _Mdp;

        private string _Droit;
        #pragma warning restore 0649

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnNomChanging(string value);
        partial void OnNomChanged();
        partial void OnPrenomChanging(string value);
        partial void OnPrenomChanged();
        partial void OnLoginChanging(string value);
        partial void OnLoginChanged();
        partial void OnMdpChanging(string value);
        partial void OnMdpChanged();
        partial void OnDroitChanging(string value);
        partial void OnDroitChanged();
        #endregion

        public Employé()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Nom in the schema.
        /// </summary>
        [Column(Name = @"nom", Storage = "_Nom", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Nom
        {
            get
            {
                return this._Nom;
            }
            set
            {
                if (this._Nom != value)
                {
                    this.OnNomChanging(value);
                    this.SendPropertyChanging("Nom");
                    this._Nom = value;
                    this.SendPropertyChanged("Nom");
                    this.OnNomChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Prenom in the schema.
        /// </summary>
        [Column(Name = @"prenom", Storage = "_Prenom", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Prenom
        {
            get
            {
                return this._Prenom;
            }
            set
            {
                if (this._Prenom != value)
                {
                    this.OnPrenomChanging(value);
                    this.SendPropertyChanging("Prenom");
                    this._Prenom = value;
                    this.SendPropertyChanged("Prenom");
                    this.OnPrenomChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Login in the schema.
        /// </summary>
        [Column(Name = @"login", Storage = "_Login", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Login
        {
            get
            {
                return this._Login;
            }
            set
            {
                if (this._Login != value)
                {
                    this.OnLoginChanging(value);
                    this.SendPropertyChanging("Login");
                    this._Login = value;
                    this.SendPropertyChanged("Login");
                    this.OnLoginChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Mdp in the schema.
        /// </summary>
        [Column(Name = @"mdp", Storage = "_Mdp", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Mdp
        {
            get
            {
                return this._Mdp;
            }
            set
            {
                if (this._Mdp != value)
                {
                    this.OnMdpChanging(value);
                    this.SendPropertyChanging("Mdp");
                    this._Mdp = value;
                    this.SendPropertyChanged("Mdp");
                    this.OnMdpChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Droit in the schema.
        /// </summary>
        [Column(Name = @"droit", Storage = "_Droit", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Droit
        {
            get
            {
                return this._Droit;
            }
            set
            {
                if (this._Droit != value)
                {
                    this.OnDroitChanging(value);
                    this.SendPropertyChanging("Droit");
                    this._Droit = value;
                    this.SendPropertyChanged("Droit");
                    this.OnDroitChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for BddprojetContext.Fermeture in the schema.
    /// </summary>
    [Table(Name = @"bddprojet.fermeture")]
    public partial class Fermeture : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private string _TypeFermeture;
        #pragma warning restore 0649

        private EntitySet<Plan> _Plans;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnTypeFermetureChanging(string value);
        partial void OnTypeFermetureChanged();
        #endregion

        public Fermeture()
        {
            this._Plans = new EntitySet<Plan>(new Action<Plan>(this.attach_Plans), new Action<Plan>(this.detach_Plans));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TypeFermeture in the schema.
        /// </summary>
        [Column(Name = @"type_fermeture", Storage = "_TypeFermeture", CanBeNull = false, DbType = "VARCHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string TypeFermeture
        {
            get
            {
                return this._TypeFermeture;
            }
            set
            {
                if (this._TypeFermeture != value)
                {
                    this.OnTypeFermetureChanging(value);
                    this.SendPropertyChanging("TypeFermeture");
                    this._TypeFermeture = value;
                    this.SendPropertyChanged("TypeFermeture");
                    this.OnTypeFermetureChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Plans in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Fermeture_Plan", Storage="_Plans", ThisKey="Id", OtherKey="IdFermeture", DeleteRule="RESTRICT")]
        public EntitySet<Plan> Plans
        {
            get
            {
                return this._Plans;
            }
            set
            {
                this._Plans.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Plans(Plan entity)
        {
            this.SendPropertyChanging("Plans");
            entity.Fermeture = this;
        }
    
        private void detach_Plans(Plan entity)
        {
            this.SendPropertyChanging("Plans");
            entity.Fermeture = null;
        }
    }

    /// <summary>
    /// There are no comments for BddprojetContext.Matériaux in the schema.
    /// </summary>
    [Table(Name = @"bddprojet.matériaux")]
    public partial class Matériaux : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private string _TypeMateriau;
        #pragma warning restore 0649

        private EntitySet<Plan> _Plans;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnTypeMateriauChanging(string value);
        partial void OnTypeMateriauChanged();
        #endregion

        public Matériaux()
        {
            this._Plans = new EntitySet<Plan>(new Action<Plan>(this.attach_Plans), new Action<Plan>(this.detach_Plans));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TypeMateriau in the schema.
        /// </summary>
        [Column(Name = @"type_materiau", Storage = "_TypeMateriau", CanBeNull = false, DbType = "VARCHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string TypeMateriau
        {
            get
            {
                return this._TypeMateriau;
            }
            set
            {
                if (this._TypeMateriau != value)
                {
                    this.OnTypeMateriauChanging(value);
                    this.SendPropertyChanging("TypeMateriau");
                    this._TypeMateriau = value;
                    this.SendPropertyChanged("TypeMateriau");
                    this.OnTypeMateriauChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Plans in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Matériaux_Plan", Storage="_Plans", ThisKey="Id", OtherKey="IdMateriaux", DeleteRule="RESTRICT")]
        public EntitySet<Plan> Plans
        {
            get
            {
                return this._Plans;
            }
            set
            {
                this._Plans.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Plans(Plan entity)
        {
            this.SendPropertyChanging("Plans");
            entity.Matériaux = this;
        }
    
        private void detach_Plans(Plan entity)
        {
            this.SendPropertyChanging("Plans");
            entity.Matériaux = null;
        }
    }

    /// <summary>
    /// There are no comments for BddprojetContext.Numeroplan in the schema.
    /// </summary>
    [Table(Name = @"bddprojet.numeroplan")]
    public partial class Numeroplan : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Numero;
        #pragma warning restore 0649

        private EntitySet<Plan> _Plans;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnNumeroChanging(int value);
        partial void OnNumeroChanged();
        #endregion

        public Numeroplan()
        {
            this._Plans = new EntitySet<Plan>(new Action<Plan>(this.attach_Plans), new Action<Plan>(this.detach_Plans));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Numero in the schema.
        /// </summary>
        [Column(Name = @"numero", Storage = "_Numero", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int Numero
        {
            get
            {
                return this._Numero;
            }
            set
            {
                if (this._Numero != value)
                {
                    this.OnNumeroChanging(value);
                    this.SendPropertyChanging("Numero");
                    this._Numero = value;
                    this.SendPropertyChanged("Numero");
                    this.OnNumeroChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Plans in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Numeroplan_Plan", Storage="_Plans", ThisKey="Numero", OtherKey="IdNumero", DeleteRule="RESTRICT")]
        public EntitySet<Plan> Plans
        {
            get
            {
                return this._Plans;
            }
            set
            {
                this._Plans.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Plans(Plan entity)
        {
            this.SendPropertyChanging("Plans");
            entity.Numeroplan = this;
        }
    
        private void detach_Plans(Plan entity)
        {
            this.SendPropertyChanging("Plans");
            entity.Numeroplan = null;
        }
    }

    /// <summary>
    /// There are no comments for BddprojetContext.Plan in the schema.
    /// </summary>
    [Table(Name = @"bddprojet.plan")]
    public partial class Plan : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private int _IdNumero;

        private string _LienFichierPlan;

        private int _IdFermeture;

        private int _IdMateriaux;

        private int _IdCommande;

        private string _Nom;
        #pragma warning restore 0649

        private EntitySet<Cote> _Cotes;

        private EntityRef<Fermeture> _Fermeture;

        private EntityRef<Matériaux> _Matériaux;

        private EntityRef<Commande> _Commande;

        private EntityRef<Numeroplan> _Numeroplan;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnIdNumeroChanging(int value);
        partial void OnIdNumeroChanged();
        partial void OnLienFichierPlanChanging(string value);
        partial void OnLienFichierPlanChanged();
        partial void OnIdFermetureChanging(int value);
        partial void OnIdFermetureChanged();
        partial void OnIdMateriauxChanging(int value);
        partial void OnIdMateriauxChanged();
        partial void OnIdCommandeChanging(int value);
        partial void OnIdCommandeChanged();
        partial void OnNomChanging(string value);
        partial void OnNomChanged();
        #endregion

        public Plan()
        {
            this._Cotes = new EntitySet<Cote>(new Action<Cote>(this.attach_Cotes), new Action<Cote>(this.detach_Cotes));
            this._Fermeture  = default(EntityRef<Fermeture>);
            this._Matériaux  = default(EntityRef<Matériaux>);
            this._Commande  = default(EntityRef<Commande>);
            this._Numeroplan  = default(EntityRef<Numeroplan>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdNumero in the schema.
        /// </summary>
        [Column(Name = @"id_numero", Storage = "_IdNumero", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int IdNumero
        {
            get
            {
                return this._IdNumero;
            }
            set
            {
                if (this._IdNumero != value)
                {
                    if (this._Numeroplan.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdNumeroChanging(value);
                    this.SendPropertyChanging("IdNumero");
                    this._IdNumero = value;
                    this.SendPropertyChanged("IdNumero");
                    this.OnIdNumeroChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LienFichierPlan in the schema.
        /// </summary>
        [Column(Name = @"lien_fichier_plan", Storage = "_LienFichierPlan", CanBeNull = false, DbType = "VARCHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string LienFichierPlan
        {
            get
            {
                return this._LienFichierPlan;
            }
            set
            {
                if (this._LienFichierPlan != value)
                {
                    this.OnLienFichierPlanChanging(value);
                    this.SendPropertyChanging("LienFichierPlan");
                    this._LienFichierPlan = value;
                    this.SendPropertyChanged("LienFichierPlan");
                    this.OnLienFichierPlanChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdFermeture in the schema.
        /// </summary>
        [Column(Name = @"id_fermeture", Storage = "_IdFermeture", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int IdFermeture
        {
            get
            {
                return this._IdFermeture;
            }
            set
            {
                if (this._IdFermeture != value)
                {
                    if (this._Fermeture.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdFermetureChanging(value);
                    this.SendPropertyChanging("IdFermeture");
                    this._IdFermeture = value;
                    this.SendPropertyChanged("IdFermeture");
                    this.OnIdFermetureChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdMateriaux in the schema.
        /// </summary>
        [Column(Name = @"id_materiaux", Storage = "_IdMateriaux", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int IdMateriaux
        {
            get
            {
                return this._IdMateriaux;
            }
            set
            {
                if (this._IdMateriaux != value)
                {
                    if (this._Matériaux.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdMateriauxChanging(value);
                    this.SendPropertyChanging("IdMateriaux");
                    this._IdMateriaux = value;
                    this.SendPropertyChanged("IdMateriaux");
                    this.OnIdMateriauxChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdCommande in the schema.
        /// </summary>
        [Column(Name = @"id_commande", Storage = "_IdCommande", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int IdCommande
        {
            get
            {
                return this._IdCommande;
            }
            set
            {
                if (this._IdCommande != value)
                {
                    if (this._Commande.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdCommandeChanging(value);
                    this.SendPropertyChanging("IdCommande");
                    this._IdCommande = value;
                    this.SendPropertyChanged("IdCommande");
                    this.OnIdCommandeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Nom in the schema.
        /// </summary>
        [Column(Name = @"nom", Storage = "_Nom", CanBeNull = false, DbType = "VARCHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Nom
        {
            get
            {
                return this._Nom;
            }
            set
            {
                if (this._Nom != value)
                {
                    this.OnNomChanging(value);
                    this.SendPropertyChanging("Nom");
                    this._Nom = value;
                    this.SendPropertyChanged("Nom");
                    this.OnNomChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cotes in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Plan_Cote", Storage="_Cotes", ThisKey="Id", OtherKey="IdPlan", DeleteRule="CASCADE")]
        public EntitySet<Cote> Cotes
        {
            get
            {
                return this._Cotes;
            }
            set
            {
                this._Cotes.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Fermeture in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Fermeture_Plan", Storage="_Fermeture", ThisKey="IdFermeture", OtherKey="Id", IsForeignKey=true)]
        public Fermeture Fermeture
        {
            get
            {
                return this._Fermeture.Entity;
            }
            set
            {
                Fermeture previousValue = this._Fermeture.Entity;
                if ((previousValue != value) || (this._Fermeture.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Fermeture");
                    if (previousValue != null)
                    {
                        this._Fermeture.Entity = null;
                        previousValue.Plans.Remove(this);
                    }
                    this._Fermeture.Entity = value;
                    if (value != null)
                    {
                        this._IdFermeture = value.Id;
                        value.Plans.Add(this);
                    }
                    else
                    {
                        this._IdFermeture = default(int);
                    }
                    this.SendPropertyChanged("Fermeture");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Matériaux in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Matériaux_Plan", Storage="_Matériaux", ThisKey="IdMateriaux", OtherKey="Id", IsForeignKey=true)]
        public Matériaux Matériaux
        {
            get
            {
                return this._Matériaux.Entity;
            }
            set
            {
                Matériaux previousValue = this._Matériaux.Entity;
                if ((previousValue != value) || (this._Matériaux.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Matériaux");
                    if (previousValue != null)
                    {
                        this._Matériaux.Entity = null;
                        previousValue.Plans.Remove(this);
                    }
                    this._Matériaux.Entity = value;
                    if (value != null)
                    {
                        this._IdMateriaux = value.Id;
                        value.Plans.Add(this);
                    }
                    else
                    {
                        this._IdMateriaux = default(int);
                    }
                    this.SendPropertyChanged("Matériaux");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Commande in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Commande_Plan", Storage="_Commande", ThisKey="IdCommande", OtherKey="Id", IsForeignKey=true)]
        public Commande Commande
        {
            get
            {
                return this._Commande.Entity;
            }
            set
            {
                Commande previousValue = this._Commande.Entity;
                if ((previousValue != value) || (this._Commande.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Commande");
                    if (previousValue != null)
                    {
                        this._Commande.Entity = null;
                        previousValue.Plans.Remove(this);
                    }
                    this._Commande.Entity = value;
                    if (value != null)
                    {
                        this._IdCommande = value.Id;
                        value.Plans.Add(this);
                    }
                    else
                    {
                        this._IdCommande = default(int);
                    }
                    this.SendPropertyChanged("Commande");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Numeroplan in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Numeroplan_Plan", Storage="_Numeroplan", ThisKey="IdNumero", OtherKey="Numero", IsForeignKey=true)]
        public Numeroplan Numeroplan
        {
            get
            {
                return this._Numeroplan.Entity;
            }
            set
            {
                Numeroplan previousValue = this._Numeroplan.Entity;
                if ((previousValue != value) || (this._Numeroplan.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Numeroplan");
                    if (previousValue != null)
                    {
                        this._Numeroplan.Entity = null;
                        previousValue.Plans.Remove(this);
                    }
                    this._Numeroplan.Entity = value;
                    if (value != null)
                    {
                        this._IdNumero = value.Numero;
                        value.Plans.Add(this);
                    }
                    else
                    {
                        this._IdNumero = default(int);
                    }
                    this.SendPropertyChanged("Numeroplan");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Cotes(Cote entity)
        {
            this.SendPropertyChanging("Cotes");
            entity.Plan = this;
        }
    
        private void detach_Cotes(Cote entity)
        {
            this.SendPropertyChanging("Cotes");
            entity.Plan = null;
        }
    }

}
